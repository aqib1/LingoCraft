openapi: 3.0.0
info:
  title: Lingo Craft API
  version: 0.0.1
servers:
  - url: /lingo-craft/v1
    description: Lingo Craft APIs
paths:
  /user/{id}:
    get:
      summary: Get a user by its id.
      operationId: getUserById
      description: This endpoint will get an existing user from our system.
      parameters:
        - name: id
          in: path
          required: true
          description: id of existing user
          schema:
            type: string
      responses:
        '200':
          description: Got User by id successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'

        '400':
          description: Bad request, check request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a user by its id.
      operationId: deleteUserById
      description: This endpoint will delete an existing user from our system.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of existing user
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '400':
          description: Bad request, check request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/email/{email}/password/{password}:
    get:
      summary: Get a user by email and password.
      operationId: getUserByEmailPassword
      description: This endpoint will get an existing user from our system.
      parameters:
        - name: email
          in: path
          required: true
          description: email of existing user
          schema:
            type: string
        - name: password
          in: path
          required: true
          description: password of existing user
          schema:
            type: string
      responses:
        '200':
          description: Got User by email and password successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'

        '400':
          description: Bad request, check request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    post:
      summary: Create a new user.
      operationId: createUser
      description: This endpoint will generate a new user in our system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: New User is created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'

        '400':
          description: Bad request, check request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email:
          type: string
        phone:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
        roleId:
          type: integer
      required:
        - name
        - password
        - email
        - phone
        - age
        - gender
        - roleId

    CreateUserResponse:
      allOf:
        - $ref: '#/components/schemas/CreateUserRequest'
        - type: object
          properties:
            id:
             type: string
          required:
            - id

    GetUserResponse:
      allOf:
        - $ref: '#/components/schemas/CreateUserResponse'

    ErrorResponse:
      type: object
      properties:
        errorMessage:
          type: string
          description: Error message details.