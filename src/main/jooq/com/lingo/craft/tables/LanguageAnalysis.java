/*
 * This file is generated by jOOQ.
 */
package com.lingo.craft.tables;


import com.lingo.craft.Keys;
import com.lingo.craft.Public;
import com.lingo.craft.tables.records.LanguageAnalysisRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LanguageAnalysis extends TableImpl<LanguageAnalysisRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.language_analysis</code>
     */
    public static final LanguageAnalysis LANGUAGE_ANALYSIS = new LanguageAnalysis();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguageAnalysisRecord> getRecordType() {
        return LanguageAnalysisRecord.class;
    }

    /**
     * The column <code>public.language_analysis.id</code>.
     */
    public final TableField<LanguageAnalysisRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.language_analysis.userid</code>.
     */
    public final TableField<LanguageAnalysisRecord, UUID> USERID = createField(DSL.name("userid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.language_analysis.accumulatedcontentsentimentscore</code>.
     */
    public final TableField<LanguageAnalysisRecord, Integer> ACCUMULATEDCONTENTSENTIMENTSCORE = createField(DSL.name("accumulatedcontentsentimentscore"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>public.language_analysis.positivesentimentpercentage</code>.
     */
    public final TableField<LanguageAnalysisRecord, String> POSITIVESENTIMENTPERCENTAGE = createField(DSL.name("positivesentimentpercentage"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public.language_analysis.accumulatedcontentsentiment</code>.
     */
    public final TableField<LanguageAnalysisRecord, String> ACCUMULATEDCONTENTSENTIMENT = createField(DSL.name("accumulatedcontentsentiment"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column
     * <code>public.language_analysis.contentsentimentanalysismodels</code>.
     */
    public final TableField<LanguageAnalysisRecord, JSONB> CONTENTSENTIMENTANALYSISMODELS = createField(DSL.name("contentsentimentanalysismodels"), SQLDataType.JSONB.nullable(false), this, "");

    private LanguageAnalysis(Name alias, Table<LanguageAnalysisRecord> aliased) {
        this(alias, aliased, null);
    }

    private LanguageAnalysis(Name alias, Table<LanguageAnalysisRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.language_analysis</code> table reference
     */
    public LanguageAnalysis(String alias) {
        this(DSL.name(alias), LANGUAGE_ANALYSIS);
    }

    /**
     * Create an aliased <code>public.language_analysis</code> table reference
     */
    public LanguageAnalysis(Name alias) {
        this(alias, LANGUAGE_ANALYSIS);
    }

    /**
     * Create a <code>public.language_analysis</code> table reference
     */
    public LanguageAnalysis() {
        this(DSL.name("language_analysis"), null);
    }

    public <O extends Record> LanguageAnalysis(Table<O> child, ForeignKey<O, LanguageAnalysisRecord> key) {
        super(child, key, LANGUAGE_ANALYSIS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LanguageAnalysisRecord> getPrimaryKey() {
        return Keys.LANGUAGE_ANALYSIS_PKEY;
    }

    @Override
    public List<ForeignKey<LanguageAnalysisRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LANGUAGE_ANALYSIS__USERID);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.LANGUAGE_ANALYSIS__USERID);

        return _user;
    }

    @Override
    public LanguageAnalysis as(String alias) {
        return new LanguageAnalysis(DSL.name(alias), this);
    }

    @Override
    public LanguageAnalysis as(Name alias) {
        return new LanguageAnalysis(alias, this);
    }

    @Override
    public LanguageAnalysis as(Table<?> alias) {
        return new LanguageAnalysis(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageAnalysis rename(String name) {
        return new LanguageAnalysis(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageAnalysis rename(Name name) {
        return new LanguageAnalysis(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LanguageAnalysis rename(Table<?> name) {
        return new LanguageAnalysis(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, Integer, String, String, JSONB> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super UUID, ? super Integer, ? super String, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super UUID, ? super Integer, ? super String, ? super String, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
